#!/bin/lua

require("utils").using("utils")
using("prettyprint")
using("dataframes")
using("database")
using("argparse")
using("paths")
using("dates")
using("user")

script_path = debug.getinfo(1, "S").source:sub(2)
add_to_path(script_path, "src")

using("bx_utils")
using("init")
using("note")
using("task")
using("update")
using("sql")

local function print_help()
    help_str = [[
Usage:  brex < command > < argument >

        brex init
        brex note < add | edit | last >
        brex task < add | list | done | delay | last >
        brex update < file >
        brex sql

        defaults:
        init -> sqlite database only
        note -> todays note add/edit
        task -> add new task
        update -> rebuild from vault
        sql -> sqlite shell

        brex < command > -h or --help for more info
    ]]

    print(help_str)
end

local function main()
    local command_parser = {
        ["init"] = init_brex,
        ["note"] = {
            default = todays_note,
            add = take_note,
            edit = edit_note,
            last = last_notes
        },
        ["task"] = {
            default = add_task,
            add = add_task,
            list = list_tasks,
            done = mark_done,
            delay = delay_due,
            last = last_done
        },
        ["update"] = {
            default = update_from_vault,
            ["file"] = update_note_from_file
            
        },
        ["sql"] = {
            default = sqlite_shell,
            ["query"] = sqlite_query
        }
    }
    
    if length(arg) == 2 then
        print_help()
        return
    end

    local command = arg[1]
    local argument = arg[2] or "default"

    arg[0] = "brex " .. command

    local command_config = command_parser[command]
    if not command_config then
        print("'" .. command .. "' is not a valid command\n")
        print_help()
        return
    end

    local func = command_config[argument]
    if not func then
        print("'" .. command .. "' got invalid argument '" .. argument .. "'\n")
        print_help()
        return
    end

    local brain_file = get_brain_file()
    func(brain_file)
end

-- run program
main()
