#!/bin/lua

require("utils").using("utils")
using("dataframes")
using("database")
using("paths")
using("dates")
using("user")

script_path = debug.getinfo(1, "S").source:sub(2)
add_to_path(script_path, "src")

using("bx_utils")
using("init")
using("note")
using("todo")
using("update")
using("sql")

local function print_help()
    help_str = [[
Usage: brex < command > < arguments >

       brex init < --vault >
       brex note < add | update >
       brex todo < list | add | done >
       brex update
       brex sql < --query >
    ]]

    print(help_str)
end

local function main()
    local command_parser = {
        ["init"] = {
            default = init_bx,
            ["--vault"] = init_bx_with_vault
        },
        ["note"] = {
            add = take_note,
            update = update_note
        },
        ["todo"] = {
            add = add_task,
            list = list_tasks,
            done = mark_done
        },
        ["update"] = {
            default = update_from_vault
        },
        ["sql"] = {
            default = sqlite_shell,
            ["--query"] = sqlite_query
        }
    }

    local func
    if length(arg) == 0 then
        print("missing command\n")
        print_help()
    elseif length(arg) == 1 then
	    local command = arg[1]
        if command == "init" then
            local func = command_parser[command]["default"]
            func()
        elseif command == "update" or command == "sql" then
            local func = command_parser[command]["default"]
            local brain_file = get_brain_file()
            func(brain_file)
        elseif occursin(command, command_parser) then
            print("'" .. command .. "' is missing arguments\n")
            print_help()
        else
            print("'" .. command .. "' is not a valid command\n")
            print_help()
        end
    elseif length(arg) == 2 then
        local command = arg[1]
        local argument = arg[2]
	    if command_parser[command] then
            if command_parser[command][argument] then
                local func = command_parser[command][argument]
                local brain_file
                if command ~= "init" then
                    brain_file = get_brain_file()
                end
                func(brain_file)
            else
                print("'" .. command .. "' got invalid argument '" .. argument .. "'\n")
                print_help()
            end
        else
            print("'" .. command .. "' is not a valid command\n")
            print_help()
        end
    else
        print("too many arguments given\n")
        print_help()
    end
end

-- run program
main()
